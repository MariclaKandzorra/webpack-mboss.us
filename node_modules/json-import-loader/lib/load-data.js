"use strict";

exports.__esModule = true;
exports.load = load;
exports.getData = getData;
exports.default = loadData;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolvePath(contentPath, options) {
  return ['json', 'js', ...(options.resolvers && Object.keys(options.resolvers) || [])].map(extension => `${contentPath}.${extension}`).find(path => _fs.default.existsSync(path));
}

function load(contentPath, options) {
  let extension = _path.default.extname(contentPath).slice(1);

  if (!extension) {
    const resolvedPath = resolvePath(contentPath, options);

    if (resolvedPath) {
      // tslint:disable no-parameter-reassignment
      contentPath = resolvedPath;
      extension = _path.default.extname(contentPath).slice(1);
    }
  }

  if (extension === 'json') {
    return _fs.default.readFileSync(contentPath, 'utf8');
  } // use normal require


  if (extension === 'js') {
    let result = require(contentPath); // if js export was a function, execute it and use the result


    if (typeof result === 'function') {
      result = result();
    }

    if (typeof result === 'string') {
      try {
        // if not parsable, it's a normal string, so stringify it to add quotes around it
        JSON.parse(result);
      } catch (e) {
        return JSON.stringify(result);
      }

      return result;
    } // convert object to json string


    return JSON.stringify(result);
  } // resolve using provided mapper


  if (options.resolvers && options.resolvers[extension]) {
    const result = options.resolvers[extension](contentPath);

    if (typeof result === 'string') {
      try {
        // if not parsable, it's a normal string, so stringify it to add quotes around it
        JSON.parse(result);
      } catch (e) {
        return JSON.stringify(result);
      } // this line is only here for safety in case your non json/js file returns a json string

      /* istanbul ignore next */


      return result;
    } // convert object to json string


    return JSON.stringify(result) || '';
  }

  throw new Error(`Extension "${extension}" for path "${contentPath}" is not supported, please configure a resolve function by setting "options.resolvers.${extension}". It will receive a path and should return the content as a string.`);
}

function getData(contentPath, options) {
  // find all import occurrences and replace with the actual content
  return load(options.processPath && typeof options.processPath === 'function' ? options.processPath(contentPath) : contentPath, options).replace(/"import!(.*?)"/gi, (_, group) => // recursion is supported
  getData(_path.default.resolve(__dirname, _path.default.dirname(contentPath), group), options));
}

function loadData(contentPath, options = {}) {
  const data = getData(contentPath, options);
  return data ? JSON.parse(data) : {};
}